import {Grid} from "@mui/material";
import React from "react";
import {ProposalHeader} from "./Header";
import {ProposalCard} from "./Card";
import {ProposalContent} from "./Content";
import useProvideMetadata from "../ProvideMetadata";
import {AptosClient, Types} from "aptos";
import {useQuery} from "react-query";
import {useGlobalState} from "../../../GlobalState";
import {ResponseError} from "../../../api/client";
import {useParams} from "react-router-dom";
import {Proposal} from "../Types";
import {EmptyProposal} from "./EmptyProposal";

// TODO: reuse table handle query from the proposal table
const TABLE_HANDLE = "66250964772389598023276627514581198483";

// TODO: generalize getTableItem logic for proposal page and proposal table
function getTableItem(
  tableHandle: string,
  data: Types.TableItemRequest,
  nodeUrl: string,
): Promise<any> {
  // TODO: there should be a type generated by SWAGGER-TYPESCRIPT-API
  // Generate it and replace `any` with this type
  const client = new AptosClient(nodeUrl);
  return client.getTableItem(tableHandle, data);
}

function getProposalData(
  proposalId: string | undefined,
  tableHandle: string,
  nodeUrl: string,
): Proposal | null {
  const data: Types.TableItemRequest = {
    key_type: "u64",
    value_type:
      "0x1::voting::Proposal<0x1::governance_proposal::GovernanceProposal>",
    key: proposalId,
  };

  const tableItem = useQuery<any, ResponseError>(
    ["tableItem", tableHandle, data, nodeUrl],
    () => getTableItem(tableHandle, data, nodeUrl),
  );

  if ("data" in tableItem && tableItem.data?.status !== 200) {
    return null;
  } else {
    return tableItem.data?.data;
  }
}

export const ProposalPage = () => {
  // TODO: add error handling
  const [state, _] = useGlobalState();
  const {id: proposalId} = useParams<string>();

  if (proposalId == null) {
    return <EmptyProposal />;
  }

  const proposal = getProposalData(
    proposalId,
    TABLE_HANDLE,
    state.network_value,
  );

  const metadata = useProvideMetadata(proposal);

  if (proposal == null) {
    return <EmptyProposal />;
  }

  return (
    <Grid container marginTop={{md: 12, xs: 6}}>
      <Grid xs={12} item>
        <ProposalHeader proposal={proposal} metadata={metadata} />
      </Grid>
      <Grid xs={12} item sx={{mb: 6}}>
        <ProposalCard proposal={proposal} proposalId={proposalId} />
      </Grid>
      <Grid item sx={{mb: 6}}>
        <ProposalContent proposal={proposal} metadata={metadata} />
      </Grid>
    </Grid>
  );
};
